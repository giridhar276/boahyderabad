objects
---------

*** Everything is python is object ***
*** Every object contains set of methods ****



number :
--------
number can be integer or octal or decimal or hexa

aval = 10
bval = 345.4


string
------
string can be defined in single or double or triple quotes

name = 'python programming'
aname = "unix shell"
bname = """scala programming"""


list  ( array in C  )
-----
list is set of elements.
Elements can be set of numbers or set of strings or any combination
list elements are defined in []

alist =[10,20,30]
blist = ["unix","shell","scala"]
clist = [10,20,30,"hadoop",40.6]


tuple ( READ ONLY )
-----
tuple is set of elements.
Elements can be set of numbers or set of strings or any combination
tuple elements are defined in ()
**** elements inside tuple cannot be  changed ******

atup = (10,20,30)
btup = ("unix","java","hadoop")
ctup = (10,20,30,"spark")



dictionary
-------------
dictionary contains elements in the form of keys and values.
dictionary elements are defined in {}.

syntax :    object = { key:value , key: value , key : value}
example :     book = {"chap1":10 , "chap2":20 , "chap3":30}




set
-----

set is group of UNIQUE elements of same type.
set elements are defined in {}.

aset = {10,20,10,20,10,10,10,10,30}



















classification of objects
-------------------------

mutable objects
----------------
list
dictionary

immutable objects
----------------
number
string
tuple
set



comments in python
-------------------


single line comment ( #)


multi line comment
--------------------

all the lines defined in between ''' and ''' are ignored by interpreter


'''
all these lines
are ignored
'''

"""
all these lines are 
ignored
"""


function & method
------------------
-method is object specific.
- string methods are different to list methods

- functions are common for all the objects
-  Using print,  we can display the number,string,list.....


How to display all the available functions and builtin Exception names	?
---------------------------------------------
In your python console... 

dir(__builtins__)

frequently used functions
------------------------

print()
len()
range()
id()
type()
isinstance()
max()
min()
sum()
zip()
help()
dir()
open()

conversion functions
--------------------
int()
float()
oct()
str()
list()
tuple()
dict()
set()


statements
-----------


conditional statements
----------------------
if 
if-else
if-elif-elif....... else


level1
level1
level1
if cond:
    level2
    level2
    level2
    if cond:
	level3
	level3
	level3
    level2
    level2

level1
level1




control statements
-------------------
for
while


jump statements
------------------
break
continue


Operators
----------
arithmetic operators : + - * % /
---------------------

logical operators :  and  or not
-------------------                     
                     if len(name) > 0  and name.isupper():
			# your statement


assignment operators ( ++ and -- are NOT allowed in python )
------------------------------------
val = 10

val +=10   (or) val = val + 10
val -=10   (or) val = val - 10


relational operators :    < <= > >= == !=
-------------------


special operators :   
-------------------
in     Eg:     if "python" in "python programming" 
               if 10 not in alist:

as ( used in exception handling and libraries)


file handling
--------------

working with flat files  ( .csv  .log .conf  .properties .txt     ... )
------------------------------------------------------------------------



opening the file
----------------

syntax :   object = open(filename, mode )
example:     fobj = open("clients.txt","r")   ----------> read  mode
             fobj = open("clients.txt","w")   -----------> write mode
	     - If the file is not existing .. it creates the file
             - If the file is already existing..it overwrites the file

             fobj = open("clients.txt","a")   -----------> append mode
	     - If the file is not existing .. it creates the file
             - If the file is already existing..it appends the data to the file



closing the file
---------------
fobj.close()



reading the file
----------------

- reading line by line
- reading the whole file at  a time
- using csv library
- using pandas library


write operation
-----------------
- using write()
- using writelines()
- using pandas

















working with third party files  (  xlsx pdf ppt zip tar.. ... ) 

















exception handling
-----------------

1. syntax error

2. runtime error

handling the exceptions in the runtime is known as exception handling.


try
except
else
finally
raise




function  or definition or subroutine
--------------------------------------

1. builtin functions

2. user defined functions



def add(a,b):
    c =a + b


add(10,20)


different ways of passing arguments
------------------------------------
fixed arguments
default arguments
keyword arguments
variable length arguments























library (or) package ( or) module
---------------------------------

Every library contains set of methods defined by someone else.

- builtin libraries
--------------------
All the builtin libraries which are generally used ( os level activities , math operations, ftp operations ,emailing ... ) are installed with python.

Path : C:\Users\Administrator\Anaconda3\Lib
       /usr/lib/python3(linux)

- third party libraries
------------------------
Based on the requirement( interacting with cloud , DB operations ,reporting , Excel operations, web developer ) , developer has to intall the third party libraries


path : C:\Users\Administrator\Anaconda3\Lib\site-packages



importing library
--------------------

importing all the methods
-------------------------
import math 
print(math.log(2))
print(math.floor(43.5))


importing required methods ONLY  ( . is not required here ) 
-------------------------------
from math import log,floor,tan
print(log(2))
print(floor(45.2))
print(tan(3))

importing with alias name
-------------------------
import math as m
print(m.floor(3))
print(m.ceil(45.2))

importing all the methods without .
------------------------------------
from math import *
print(log(2))
print(floor(45.2))




Python object oriented
----------------------

class contains data members and member functions

Internally, List is the class ..class List contains methods like append(), extend()
            Tuple is the class ..class Tuple contains methods like  count(), index
            Set is the class


object: Object is instance of the class

self  : self is the instance of the object

constructor in python will start with __init__ keyword





Installing third party library
------------------------------

-> pip tool  ( installed with python in windows )
-------------------------------------------------
open command prompt and type the below

pip install pymysql


-> easy_install tool  ( installed with python in windows)
------------------------------------------------------
easy_install pymysql


-> installing manually
------------------------

-open pypi.org and search for the required library
-download  and extract the library and navigate to the path
-python setup.py install




python - mysql
--------------

1.  mysql software has to be installed
2. pymysql has to be installed


creating the database
---------------------
create database boa ;

accessing your database
-------------------------
use boa ;

display all the tables
-----------------------
show tables ;

creating table
--------------
create table realestate ( street varchar(100) , city varchar(100) ) ;

inserting records
-----------------
insert into realestate values('3526 HIGH ST','SACRAMENTO');
insert into realestate values('51 OMAHA CT','SACRAMENTO');

display all the records
------------------------
select * from realestate;

view the table structure
-------------------------
desc realestate ;






accessing remote servers
------------------------


paramiko  ( accessing linux servers )

netmiko   ( accessing routers,switches, load balancer)





re
----

metacharacters (or) wildcard characters
------------------------------------------
^ : match at the beginning of the string ONLY
    re.search("^python", line):

line = "I love python"
$ : match at the end of the string
    re.search("python$", line):

* : zero or more occurences of the preceding character
    re.search("pyt*hon", line):
    pyttthon   --> valid
    pyhon      --> valid
    pyttttthon --> valid

+ : one or more occurences of the preceding character
    re.search("pyt+hon", line):
    pyttthon   --> valid
    pyhon      --> invalid
    pyttttthon --> valid

? : either zero or one occurence of the preceding charc
    pyttthon   --> invalid
    pyhon      --> vali
    pyttttthon --> invalid

. : any single character or digit or symbol
    re.search(".ython", line):    
    python  --> valid
    zython  --> valid

(first|second) : either first or second
    re.search("perl|python" , line)
    - line should contain either perl or python


{min,max} : min to max occurences of the preceding charcter
    re.search("pyt{1,5}hon", line):
    pyttthon   --> valid
    pyhon      --> invalid
    pyttttthon --> valid


[] : grouping  ( only one single charcter from the group )
    re.search("[qwert]ython", line):
     python -----> invalid
     zython  ----> invvalid
     qython  ----> valid


\w  : word boundary
\s+  : white space
\d  : digit
\d{1,3}












python with cloud  -  boto3
-------------------------


-> create user with access key and secret key

-> pip install boto3 ( required)
   pip install awscli ( required)


-> configure you aws  with your access and secret key

   aws configure    ( enter)






















